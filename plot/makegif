#!/bin/bash

# to debug:
#	nautilus -q
#	nautilus --no-desktop

# Read selected file paths from Nautilus (MAPFILE is the default variable)
readarray -t <<< "${NAUTILUS_SCRIPT_SELECTED_FILE_PATHS}"

# Get path and filename of the first image to construct the output GIF name
path="$(dirname "${MAPFILE[0]}")"
file=$(basename "${MAPFILE[0]}")
if [[ $file == *.nii ]]; then
    outname="${file/.nii/.gif}"
else
    outname="${file/.nii.gz/.gif}"
fi

# Build input list from selected files & remove the last empty element
unset MAPFILE[-1]
printf -v imgs "'%s'," "${MAPFILE[@]}"
imgs="[$imgs]"

### Set default settings
v="sagittal"
s4d="False"
r=1
ra="(1,2)"
f="False"
rw="True"
w="[1,98]"
t="True"
c="False"
sc=2
cmap="False"
crop="True"
vwn="False"
fps=25
concat=1

# Prompt user with options using zenity.
# Store the input in a variable and split it into an array called 'settings'
inp=$(zenity \
	--forms \
	--title="Make GIF" \
	--text="Select settings:" \
	--add-combo "View" --combo-values "sagittal|coronal|axial" \
	--add-combo "Rewind" --combo-values "True|False" \
	--add-entry="Winsorize 0-100 (list, [[1,98]])" \
	--add-combo "Rotate axis" --combo-values "(1,2)|(1,3)|(2,1)|(2,3)|(3,1)|(3,2)" \
	--add-combo "Rotate 90" --combo-values "False|1|2|3" \
	--add-combo "Flip axis" --combo-values "False|1|2|3" \
	--add-entry="Slice4D (int, [False])" \
	--add-combo "Timebar" --combo-values "False|True" \
	--add-entry="Crosshair (list(x,y), [False])" \
	--add-entry="Colormap (str, [False])" \
	--add-entry="Scale (int, [False])" \
	--add-combo "Crop air" --combo-values "True|False" \
	--add-combo "Independent normalization of volumes" --combo-values "False|True" \
	--add-entry="FPS 1-60 (int, [60])" \
	--add-combo "Concatenate along axis" --combo-values "1|2|3" \
)

IFS="|" read -r -a settings <<< "$inp"

# Override defaults if user input is provided
[ -n "${settings[0]}" ] && v=${settings[0]}
[ -n "${settings[1]}" ] && rw=${settings[1]}
[ -n "${settings[2]}" ] && w=${settings[2]}
[ -n "${settings[3]}" ] && ra=${settings[3]}
[ -n "${settings[4]}" ] && r=${settings[4]}
[ -n "${settings[5]}" ] && f=${settings[5]}
[ -n "${settings[6]}" ] && s4d=${settings[6]}
[ -n "${settings[7]}" ] && t=${settings[7]}
[ -n "${settings[8]}" ] && c=${settings[8]}
[ -n "${settings[9]}" ] && cmap=${settings[9]}
[ -n "${settings[10]}" ] && sc=${settings[10]}
[ -n "${settings[11]}" ] && crop=${settings[11]}
[ -n "${settings[12]}" ] && vwn=${settings[12]}
[ -n "${settings[13]}" ] && fps=${settings[13]}
[ -n "${settings[14]}" ] && concat=${settings[14]}

# Notify user that GIF generation is starting
notify-send "Generating gif."

# Determine the script directory
SCRIPT_DIR=$(dirname "$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )")

# Run the Python script to generate the GIF and capture any error output
py_script=$(python3 -c "
import sys
sys.path.append('${SCRIPT_DIR}/lib')
from neuronautilus_mkgif import mkgif

try:
    mkgif(
        ${imgs},
        path='${path}/${outname}',
        view='${v}',
        slice4d=${s4d},
        rotate=${r},
        rotaxes=${ra},
        flip=${f},
        rewind=${rw},
        winsorize=${w},
        timebar=${t},
        crosshair=${c},
        scale=${sc},
        crop=${crop},
        vol_wise_norm=${vwn},
        fps=${fps},
        concat_along=${concat},
        cmap='${cmap}'
    )
    sys.exit(0)
except Exception as e:
    print(f'Error: {e}', file=sys.stderr)
    sys.exit(1)
" 2>&1)

# Check if the output GIF was created; if not, show the error in xterm
if test -f "${path}/${outname}"; then
    notify-send "Done: ${outname}"
else
    if [ $? -ne 0 ]; then
        xterm -hold -e "bash -c 'echo Error occurred:; echo \"${py_script}\"'"
    fi
fi
